<?xml version="1.0"?>
<doc>
    <assembly>
        <name>nanoFramework.System.Security.Cryptography</name>
    </assembly>
    <members>
        <member name="T:System.Security.Cryptography.CipherMode">
            <summary>
            Specifies the block cipher mode to use for encryption.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.CipherMode.None">
            <summary>
            No cipher mode set. 
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.CipherMode.CBC">
            <summary>
            The Cipher Block Chaining (CBC) mode introduces feedback. Before each plain text
            block is encrypted, it is combined with the cipher text of the previous block
            by a bitwise exclusive OR operation. This ensures that even if the plain text
            contains many identical blocks, they will each encrypt to a different cipher
            text block. The initialization vector is combined with the first plain text block
            by a bitwise exclusive OR operation before the block is encrypted. If a single
            bit of the cipher text block is mangled, the corresponding plain text block will
            also be mangled. In addition, a bit in the subsequent block, in the same position
            as the original mangled bit, will be mangled.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.CipherMode.ECB">
            <summary>
            The Electronic Codebook (ECB) mode encrypts each block individually. Any blocks
            of plain text that are identical and in the same message, or that are in a different
            message encrypted with the same key, will be transformed into identical cipher
            text blocks. **Important:** This mode is not recommended because it opens the door
            for multiple security exploits. If the plain text to be encrypted contains substantial
            repetition, it is feasible for the cipher text to be broken one block at a time.
            It is also possible to use block analysis to determine the encryption key. Also,
            an active adversary can substitute and exchange individual blocks without detection,
            which allows blocks to be saved and inserted into the stream at other points
            without detection.
            </summary>
        </member>
        <member name="T:System.Security.Cryptography.Aes">
            <summary>
            Provides an Advanced Encryption Standard (AES) algorithm to encrypt and decrypt data.
            </summary>
        </member>
        <member name="P:System.Security.Cryptography.Aes.Mode">
            <summary>
            Gets or sets the mode for operation of the symmetric algorithm.
            </summary>
            <value>The mode for operation of the symmetric algorithm.</value>
        </member>
        <member name="P:System.Security.Cryptography.Aes.Key">
            <summary>
            Gets or sets the secret key for the symmetric algorithm.
            </summary>
            <value>The secret key for the symmetric algorithm.</value>
        </member>
        <member name="P:System.Security.Cryptography.Aes.IV">
            <summary>
            Gets or sets the initialization vector for the symmetric algorithm.
            </summary>
            <value>The initialization vector.</value>
        </member>
        <member name="M:System.Security.Cryptography.Aes.#ctor(System.Security.Cryptography.CipherMode)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Security.Cryptography.Aes"/> class.
            </summary>
        </member>
        <member name="M:System.Security.Cryptography.Aes.GenerateIV">
            <summary>
            Generate a random initialization vector
            </summary>
        </member>
        <member name="M:System.Security.Cryptography.Aes.Encrypt(System.Byte[])">
            <summary>
            Encrypts data using the cipher specified in <see cref="P:System.Security.Cryptography.Aes.Mode"/>.
            </summary>
            <param name="data">The data to encrypt.</param>
            <returns>The encrypted ciphertext data.</returns>
            <exception cref="T:System.InvalidOperationException">If the <see cref="P:System.Security.Cryptography.Aes.Key"/> hasn't been set.</exception>
            <exception cref="T:System.ArgumentException">
            <para>If the <see cref="P:System.Security.Cryptography.Aes.Key"/> is not a multiple of the block size (16 bytes for AES).</para>
            <para>-OR-</para>
            <para>If the <paramref name="data"/> is not a multiple of the block size (16 bytes for AES).</para>
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Aes.Decrypt(System.Byte[])">
            <summary>
            Decrypts data using cipher specified in <see cref="P:System.Security.Cryptography.Aes.Mode"/>.
            </summary>
            <param name="data">The data to decrypt.</param>
            <returns>The decrypted plaintext data.</returns>
            <exception cref="T:System.InvalidOperationException">If the <see cref="P:System.Security.Cryptography.Aes.Key"/> hasn't been set.</exception>
            <exception cref="T:System.ArgumentException">
            <para>If the <see cref="P:System.Security.Cryptography.Aes.Key"/> is not a multiple of the block size (16 bytes for AES).</para>
            <para>-OR-</para>
            <para>If the <paramref name="data"/> is not a multiple of the block size (16 bytes for AES).</para>
            </exception>
        </member>
        <member name="T:System.Security.Cryptography.HMACSHA256">
            <summary>
            Computes a Hash-based Message Authentication Code (HMAC) by using the SHA256 hash function.
            </summary>
        </member>
        <member name="P:System.Security.Cryptography.HMACSHA256.Hash">
            <summary>
            Gets the value of the computed hash code.
            </summary>
            <value>The current value of the computed hash code.</value>
            <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
        </member>
        <member name="P:System.Security.Cryptography.HMACSHA256.Key">
            <summary>
            Gets or sets the key to use in the HMAC calculation.
            </summary>
            <value>The key to use in the HMAC calculation.</value>
            <remarks>
            <para>
            This property is the key for the keyed hash algorithm.
            </para>
            <para>
            A Hash-based Message Authentication Code (HMAC) can be used to determine whether a message sent over an insecure channel has been tampered with, provided that the sender and receiver share a secret key. The sender computes the hash value for the original data and sends both the original data and the HMAC as a single message. The receiver recomputes the hash value on the received message and checks that the computed hash value matches the transmitted hash value.
            </para>
            </remarks>
        </member>
        <member name="M:System.Security.Cryptography.HMACSHA256.#ctor">
            <summary>
            Initializes a new instance of the HMACSHA256 class with a randomly generated key.
            </summary>
            <remarks>
            <para>
            <see cref="T:System.Security.Cryptography.HMACSHA256"/> is a type of keyed hash algorithm that is constructed from the SHA-256 hash function and used as a Hash-based Message Authentication Code (HMAC). The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time. The output hash is 256 bits in length.
            </para>
            <para>
            This constructor uses a 64-byte, randomly generated key.
            </para>
            </remarks>
        </member>
        <member name="M:System.Security.Cryptography.HMACSHA256.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Security.Cryptography.HMACSHA256"/> class with the specified key data.
            </summary>
            <param name="key">The secret key for HMAC computation. The key can be any length. However, the recommended size is 64 bytes. If the key is more than 64 bytes long, it is hashed (using SHA-256) to derive a 32-byte key.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="key"/> parameter is <see langword="null"/>.</exception>
            <remarks>
            <see cref="T:System.Security.Cryptography.HMACSHA256"/> is a type of keyed hash algorithm that is constructed from the SHA-256 hash function and used as a Hash-based Message Authentication Code (HMAC). The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time. The output hash is 256 bits in length.
            </remarks>
        </member>
        <member name="M:System.Security.Cryptography.HMACSHA256.ComputeHash(System.Byte[])">
            <summary>
            Computes the hash value for the specified byte array.
            </summary>
            <param name="buffer">The input to compute the hash code for.</param>
            <returns>The computed hash code.</returns>
            <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.Security.Cryptography.HMACSHA256.HashData(System.Byte[],System.Byte[])">
            <summary>
            Computes the HMAC of data using the SHA256 algorithm.
            </summary>
            <param name="key">The HMAC key.</param>
            <param name="source">The data to HMAC.</param>\
            <returns>The HMAC of the data.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key" /> or <paramref name="source" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.HMACSHA256.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:System.Security.Cryptography.HMACSHA256.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
    </members>
</doc>
