<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.IO.FileSystem</name>
    </assembly>
    <members>
        <member name="T:System.IO.DirectoryInfo">
            <summary>
            Exposes instance methods for creating, moving, and enumerating through directories and subdirectories. This class cannot be inherited.
            </summary>
        </member>
        <member name="P:System.IO.DirectoryInfo.Name">
            <summary>
            Gets the name of this <see cref="T:System.IO.DirectoryInfo"/> instance.
            </summary>
        </member>
        <member name="P:System.IO.DirectoryInfo.Exists">
            <inheritdoc/>
        </member>
        <member name="P:System.IO.DirectoryInfo.Root">
            <summary>
            Gets the root portion of the directory.
            </summary>
            <value>An object that represents the root of the directory.</value>
        </member>
        <member name="P:System.IO.DirectoryInfo.Parent">
            <summary>
            Gets the parent directory of a specified subdirectory.
            </summary>
        </member>
        <member name="M:System.IO.DirectoryInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.IO.DirectoryInfo"/> class on the specified path.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:System.IO.DirectoryInfo.Create">
            <summary>
            Creates a directory.
            </summary>
        </member>
        <member name="M:System.IO.DirectoryInfo.CreateSubdirectory(System.String)">
            <summary>
            Creates a subdirectory or subdirectories on the specified path. The specified path can be relative to this instance of the <see cref="T:System.IO.DirectoryInfo"/> class.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryInfo.GetFiles">
            <summary>
            Returns a file list from the current directory.
            </summary>
            <returns>
            An array of type <see cref="T:System.IO.FileInfo"/>.
            </returns>
            <exception cref="T:System.IO.IOException"> Logical drive or a directory under given path does not exist. </exception>
        </member>
        <member name="M:System.IO.DirectoryInfo.GetDirectories">
            <summary>
            Returns the subdirectories of the current directory.
            </summary>
            <returns>An array of <see cref="T:System.IO.DirectoryInfo"/> objects.</returns>
        </member>
        <member name="M:System.IO.DirectoryInfo.MoveTo(System.String)">
            <summary>
            Moves a <see cref="T:System.IO.DirectoryInfo"/> instance and its contents to a new path.
            </summary>
            <param name="destDirName">The name and path to which to move this directory. The destination cannot be another disk volume or a directory with the identical name. It can be an existing directory to which you want to add this directory as a subdirectory.</param>
            <exception cref="T:System.IO.IOException">An attempt was made to move a directory to a different volume. -or- <paramref name="destDirName"/> already exists. -or- The source directory does not exist. -or- The source or destination directory name is <see langword="null"/>.</exception>"
            <exception cref="T:System.ArgumentNullException"><paramref name="destDirName"/> is <see langword="null"/>.</exception>"
        </member>
        <member name="M:System.IO.DirectoryInfo.Delete">
            <inheritdoc/>
        </member>
        <member name="M:System.IO.DirectoryInfo.Delete(System.Boolean)">
            <summary>
            Deletes this instance of a <see cref="T:System.IO.DirectoryInfo"/>, specifying whether to delete subdirectories and files.
            </summary>
            <param name="recursive"><see langword="true"/> to delete this directory, its subdirectories, and all files; otherwise, <see langword="false"/>.</param>
        </member>
        <member name="M:System.IO.DirectoryInfo.HandleRefreshError">
            <inheritdoc/>
        </member>
        <member name="M:System.IO.DirectoryInfo.ToString">
            <summary>
            Returns the original path that was passed to the <see cref="T:System.IO.DirectoryInfo"/> constructor. Use the <see cref="P:System.IO.FileSystemInfo.FullName"/> or <see cref="P:System.IO.DirectoryInfo.Name"/> properties for the full path or file/directory name instead of this method.
            </summary>
            <returns>The original path that was passed by the user.</returns>
        </member>
        <member name="T:System.IO.DriveInfo">
            <summary>
            Provides access to information on a drive.
            </summary>
        </member>
        <member name="P:System.IO.DriveInfo.DriveType">
            <summary>
            Gets the drive type, such as removable, fixed or RAM.
            </summary>
            <value>
            One of the enumeration values that specifies a drive type.
            </value>
        </member>
        <member name="P:System.IO.DriveInfo.Name">
            <summary>
            Gets the name of a drive, such as C:\.
            </summary>
            <value>
            The name of the drive.
            </value>
        </member>
        <member name="P:System.IO.DriveInfo.TotalSize">
            <summary>
            Gets the total size of storage space on a drive, in bytes.
            </summary>
            <value>
            The total size of the drive, in bytes.
            </value>
            <exception cref="T:System.IO.IOException">An I/O error occurred (for example, a disk error or a drive was not ready).</exception>
        </member>
        <member name="M:System.IO.DriveInfo.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:System.IO.DriveInfo"/> class.
            </summary>
            <param name="driveName">A valid drive letter or fully qualified path.</param>
            <exception cref="T:System.ArgumentNullException">The drive letter cannot be <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="driveName"/> does not refer to a valid drive.</exception>
            <remarks>
            <para>
            You can't use this constructor to obtain information on drive names that are null or use UNC (\\server\share) paths.
            </para>
            <para>
            On .NET nanoFramework, this constructor only supports drive letters.
            </para>
            </remarks>
        </member>
        <member name="M:System.IO.DriveInfo.GetDrives">
            <summary>
            Retrieves the drive names of all logical drives on a computer.
            </summary>
            <returns>
            An array of type <see cref="T:System.IO.DriveInfo"/> that represents the logical drives on a computer.
            </returns>
        </member>
        <member name="M:System.IO.DriveInfo.Format(System.String,System.UInt32)">
            <summary>
            Formats the specified drive.
            *** NOTE THAT THIS OPERATION IS NOT REVERSIBLE ***.
            </summary>
            <param name="fileSystem">File system to use for the format operation.</param>
            <param name="parameter">A parameter to pass to the format operation.</param>
            <exception cref="T:System.NotSupportedException">Thrown when the target doesn't have support for performing the format operation on the specified drive.</exception>
            <exception cref="T:System.IO.IOException">Thrown when the operation fails.</exception>
            <remarks>
            <para>This method is not reversible. Once the drive is formatted, all data on the drive is lost.</para>
            <para>This method is implemented in the .NET nanoFramework API but it is not supported on all target devices nor on all file systems.</para>
            </remarks>
        </member>
        <member name="M:System.IO.DriveInfo.Refresh">
            <summary>
            Refreshes the information about the drive.
            </summary>
        </member>
        <member name="M:System.IO.DriveInfo.GetFileSystems">
            <summary>
            Retrieves the names of the file systems available on the connected device.
            </summary>
            <returns>An array of strings that represent the names of the file systems available on the connected device.</returns>
        </member>
        <member name="M:System.IO.DriveInfo.MountRemovableVolumes">
            <summary>
            Tries to mount all removable volumes.
            </summary>
            <remarks>
            This method is implemented in the .NET nanoFramework API but it is not supported on all target devices.
            </remarks>
        </member>
        <member name="T:System.IO.Directory">
            <summary>
            Exposes static methods for creating, moving, and enumerating through directories and subdirectories. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:System.IO.Directory.CreateDirectory(System.String)">
            <summary>
            Creates all directories and subdirectories in the specified path unless they already exist.
            </summary>
            <param name="path">The directory to create.</param>
            <returns>An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists.</returns>
            <exception cref="T:System.IO.IOException"> The directory specified by path is a file.</exception>
        </member>
        <member name="M:System.IO.Directory.Delete(System.String)">
            <summary>
            Deletes an empty directory from a specified path.
            </summary>
            <param name="path">The name of the empty directory to remove. This directory must be writable and empty.</param>
            <exception cref="T:System.IO.IOException">The directory specified by path is not empty.</exception>
        </member>
        <member name="M:System.IO.Directory.Delete(System.String,System.Boolean)">
            <summary>
            Deletes the specified directory and, if indicated, any subdirectories and files in the directory.
            </summary>
            <param name="path">The name of the directory to remove.</param>
            <param name="recursive"><see langword="true"/> to remove directories, subdirectories, and files in path; otherwise, <see langword="false"/>.</param>
            <exception cref="T:System.IO.IOException">A file with the same name and location specified by path exists. -or- The directory specified by path is read-only, or recursive is false and path is not an empty directory. -or- The directory is the application's current working directory. -or- The directory contains a read-only file. -or- The directory is being used by another process.</exception>
            <remarks>The platform or storage file system may not support recursive deletion of directories. The default value for recursive is <see langword="false"/>. In this case an exception will be thrown.</remarks>
        </member>
        <member name="M:System.IO.Directory.Exists(System.String)">
            <summary>
            Determines whether the given path refers to an existing directory on disk.
            </summary>
            <param name="path">The path to test.</param>
            <returns><see langword="true"/> if <paramref name="path"/> refers to an existing directory; <see langword="false"/> if the directory does not exist or an error occurs when trying to determine if the specified directory exists.</returns>
            <exception cref="T:System.ArgumentNullException">Path must be defined.</exception>
            <exception cref="T:System.IO.IOException">Invalid drive or path to the parent folder doesn't exist.</exception>
        </member>
        <member name="M:System.IO.Directory.GetCurrentDirectory">
            <summary>
            Gets the current working directory of the application.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.IO.Directory.GetFiles(System.String)">
            <summary>
            Returns the names of files (including their paths) in the specified directory.
            </summary>
            <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
            <returns>
            An array of the full names (including paths) for the files in the specified directory, or an empty array if no files are found. 
            </returns>
            <exception cref="T:System.IO.IOException"> Logical drive or a directory under given path does not exist. </exception>
        </member>
        <member name="M:System.IO.Directory.GetDirectories(System.String)">
            <summary>
            Returns the names of subdirectories (including their paths) in the specified directory.
            </summary>
            <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
            <returns> 
            An array of the full names (including paths) of subdirectories in the specified path, or an empty array if no directories are found.
            </returns>
            <exception cref="T:System.IO.IOException"> Logical drive or a directory under given path does not exist. </exception>
        </member>
        <member name="M:System.IO.Directory.Move(System.String,System.String)">
            <summary>
            Moves a file or a directory and its contents to a new location.
            </summary>
            <param name="sourceDirName">The path of the file or directory to move.</param>
            <param name="destDirName">The path to the new location for <paramref name="sourceDirName"/> or its contents. If <paramref name="sourceDirName"/> is a file, then <paramref name="destDirName"/> must also be a file name.</param>
            <exception cref="T:System.IO.IOException">n attempt was made to move a directory to a different volume. -or- destDirName already exists. See the note in the Remarks section. -or- The source directory does not exist. -or- The source or destination directory name is <see langword="null"/>. -or- The <paramref name="sourceDirName"/> and <paramref name="destDirName"/> parameters refer to the same file or directory. -or- The directory or a file within it is being used by another process.</exception>
        </member>
        <member name="M:System.IO.Directory.SetCurrentDirectory(System.String)">
            <summary>
            Sets the application's current working directory to the specified directory.
            </summary>
            <param name="path">The path to which the current working directory is set.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        </member>
        <member name="T:System.IO.File">
            <summary>
            Provides static methods for the creation, copying, deletion, moving, and opening of a single file, and aids in the creation of <see cref="T:System.IO.FileStream"/> objects.
            </summary>
        </member>
        <member name="M:System.IO.File.AppendText(System.String)">
            <summary>
            Creates a <see cref="T:System.IO.StreamWriter"/> that appends UTF-8 encoded text to an existing file, or to a new file if the specified file does not exist.
            </summary>
            <param name="path">The path to the file to append to.</param>
            <returns>A stream writer that appends UTF-8 encoded text to the specified file or to a new file.</returns>
        </member>
        <member name="M:System.IO.File.AppendAllText(System.String,System.String)">
            <summary>
            Opens a file, appends the specified string to the file, and then closes the file. If the file does not exist, this method creates a file, writes the specified string to the file, then closes the file.
            </summary>
            <param name="path">The file to append the specified string to.</param>
            <param name="contents">The string to append to the file.</param>
        </member>
        <member name="M:System.IO.File.Copy(System.String,System.String)">
            <summary>
            Copies an existing file to a new file. Overwriting a file of the same name is not allowed.
            </summary>
            <param name="sourceFileName">The file to copy.</param>
            <param name="destFileName">The name of the destination file. This cannot be a directory or an existing file.</param>
            <exception cref="T:System.ArgumentException"><paramref name="sourceFileName"/> or <paramref name="destFileName"/> is <see langword="null"/> or empty.</exception>
        </member>
        <member name="M:System.IO.File.Copy(System.String,System.String,System.Boolean)">
            <summary>
            Copies an existing file to a new file. Overwriting a file of the same name is allowed.
            </summary>
            <param name="sourceFileName">The file to copy.</param>
            <param name="destFileName">The name of the destination file. This cannot be a directory.</param>
            <param name="overwrite"><see langword="true"/> if the destination file can be overwritten; otherwise, <see langword="false"/>.</param>
            <exception cref="T:System.ArgumentException"><paramref name="sourceFileName"/> or <paramref name="destFileName"/> is <see langword="null"/> or empty.</exception>
        </member>
        <member name="M:System.IO.File.Create(System.String)">
            <summary>
            Creates, or truncates and overwrites, a file in the specified path.
            </summary>
            <param name="path">The path and name of the file to create.</param>
            <returns>A <see cref="T:System.IO.FileStream"/> that provides read/write access to the file specified in <paramref name="path"/>.</returns>
        </member>
        <member name="M:System.IO.File.Create(System.String,System.Int32)">
            <summary>
            Creates or opens a file for writing UTF-8 encoded text.
            </summary>
            <param name="path">The path and name of the file to create.</param>
            <param name="bufferSize">The number of bytes buffered for reads and writes to the file.</param>
            <returns>A <see cref="T:System.IO.FileStream"/> that provides read/write access to the file specified in <paramref name="path"/>.</returns>
        </member>
        <member name="M:System.IO.File.Delete(System.String)">
            <summary>
            Deletes the specified file.
            </summary>
            <param name="path">The name of the file to be deleted. Wildcard characters are not supported.</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is <see langword="null"/> or empty.</exception>
            <exception cref="T:System.IO.IOException">Directory is not found or <paramref name="path"/> is read-only or a directory.</exception>
        </member>
        <member name="M:System.IO.File.Exists(System.String)">
            <summary>
            Determines whether the specified file exists.
            </summary>
            <param name="path">The file to check.</param>
            <returns><see langword="true"/> if the caller has the required permissions and <paramref name="path"/> contains the name of an existing file; otherwise, <see langword="false"/>. This method also returns <see langword="false"/> if <paramref name="path"/> is <see langword="null"/>, an invalid <paramref name="path"/>, or a zero-length string. If the caller does not have sufficient permissions to read the specified file, no exception is thrown and the method returns <see langword="false"/> regardless of the existence of <paramref name="path"/>.</returns>
        </member>
        <member name="M:System.IO.File.GetAttributes(System.String)">
            <summary>
            Gets the <see cref="T:System.IO.FileAttributes"/> of the file on the path.
            </summary>
            <param name="path">The path to the file.</param>
            <exception cref="T:System.IO.IOException"><paramref name="path"/> cannot be not found.</exception>
        </member>
        <member name="M:System.IO.File.Move(System.String,System.String)">
            <summary>
            Moves a specified file to a new location, providing the option to specify a new file name.
            </summary>
            <param name="sourceFileName">The name of the file to move. Must be an absolute path.</param>
            <param name="destFileName">The new path and name for the file.</param>
            <exception cref="T:System.ArgumentException"><paramref name="sourceFileName"/> or <paramref name="destFileName"/> is <see langword="null"/> or empty.</exception>
            <exception cref="T:System.IO.IOException"><paramref name="sourceFileName"/> does not exist or <paramref name="destFileName"/> exists.</exception>
            <remarks>
            .NET nanoFramework implementation differs from the full framework as it requires that <paramref name="sourceFileName"/> be an absolute path. This is a limitation coming from the platform.
            </remarks>
        </member>
        <member name="M:System.IO.File.Open(System.String,System.IO.FileMode)">
            <summary>
            Opens a <see cref="T:System.IO.FileStream"/> on the specified path with read/write access with no sharing.
            </summary>
            <param name="path">The file to open.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten.</param>
            <returns>A <see cref="T:System.IO.FileStream"/> opened in the specified mode and path, with read/write access and not shared.</returns>
        </member>
        <member name="M:System.IO.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens a FileStream on the specified path, with the specified mode and access with no sharing.
            </summary>
            <param name="path">The file to open.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten.</param>
            <param name="access">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the file.</param>
            <returns>An unshared <see cref="T:System.IO.FileStream"/> that provides access to the specified file, with the specified mode and access.</returns>
        </member>
        <member name="M:System.IO.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Opens a FileStream on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option.
            </summary>
            <param name="path">The file to open.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten.</param>
            <param name="access">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the file.</param>
            <param name="share">A FileShare value specifying the type of access other threads have to the file.</param>
            <returns>A <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option.</returns>
        </member>
        <member name="M:System.IO.File.OpenRead(System.String)">
            <summary>
            Opens an existing file for reading.
            </summary>
            <param name="path">The file to be opened for reading.</param>
            <returns>A <see cref="T:System.IO.FileStream"/> on the specified path.</returns>
        </member>
        <member name="M:System.IO.File.OpenText(System.String)">
            <summary>
            Opens an existing UTF-8 encoded text file for reading.
            </summary>
            <param name="path">The file to be opened for reading.</param>
            <returns>A <see cref="T:System.IO.StreamReader"/> on the specified path.</returns>
        </member>
        <member name="M:System.IO.File.OpenWrite(System.String)">
            <summary>
            Opens an existing file or creates a new file for writing.
            </summary>
            <param name="path">The file to be opened for writing.</param>
        </member>
        <member name="M:System.IO.File.ReadAllBytes(System.String)">
            <summary>
            Opens a binary file, reads the contents of the file into a byte array, and then closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
            <exception cref="T:System.IO.IOException">The end of the file was unexpectedly reached.</exception>
        </member>
        <member name="M:System.IO.File.ReadAllText(System.String)">
            <summary>
            Opens a text file, reads all the text in the file, and then closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
        </member>
        <member name="M:System.IO.File.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>
            Sets the specified <see cref="T:System.IO.FileAttributes"/> of the file on the specified path.
            </summary>
            <param name="path">The path to the file.</param>
            <param name="fileAttributes">A bitwise combination of the enumeration values.</param>
            <exception cref="T:System.IO.IOException"><paramref name="path"/> cannot be not found.</exception>"
        </member>
        <member name="M:System.IO.File.WriteAllBytes(System.String,System.Byte[])">
            <summary>
            Creates a new file, writes the specified byte array to the file, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="bytes">The bytes to write to the file.</param>
        </member>
        <member name="M:System.IO.File.WriteAllText(System.String,System.String)">
            <summary>
            Creates a new file, writes the specified string to the file, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The string to write to the file.</param>
        </member>
        <member name="T:System.IO.FileAccess">
            <summary>
            Contains constants for specifying the access you want for a file.
            You can have Read, Write or ReadWrite access.
            </summary>
        </member>
        <member name="F:System.IO.FileAccess.Read">
            <summary>
            Specifies read access to the file. Data can be read from the file and
            the file pointer can be moved. Combine with WRITE for read-write access.
            </summary>
        </member>
        <member name="F:System.IO.FileAccess.Write">
            <summary>
            Specifies write access to the file. Data can be written to the file and
            the file pointer can be moved. Combine with READ for read-write access.
            </summary>
        </member>
        <member name="F:System.IO.FileAccess.ReadWrite">
            <summary>
            Specifies read and write access to the file. Data can be written to the
            file and the file pointer can be moved. Data can also be read from the
            file.
            </summary>
        </member>
        <member name="T:System.IO.FileAttributes">
            <summary>
            Provides attributes for files and directories.
            </summary>
        </member>
        <member name="F:System.IO.FileAttributes.ReadOnly">
            <summary>
            The file is read-only.
            </summary>
        </member>
        <member name="F:System.IO.FileAttributes.Hidden">
            <summary>
            The file is hidden, and thus is not included in an ordinary directory listing.
            </summary>
        </member>
        <member name="F:System.IO.FileAttributes.System">
            <summary>
            The file is a system file. That is, the file is part of the operating system or is used exclusively by the operating system.
            </summary>
        </member>
        <member name="F:System.IO.FileAttributes.Directory">
            <summary>
            The file is a directory.
            </summary>
        </member>
        <member name="F:System.IO.FileAttributes.Archive">
            <summary>
            This file is marked to be included in incremental backup operation.
            </summary>
        </member>
        <member name="F:System.IO.FileAttributes.Normal">
            <summary>
            The file is a standard file that has no special attributes. This attribute is valid only if it is used alone.
            </summary>
        </member>
        <member name="T:System.IO.DriveType">
            <summary>
            Defines constants for drive types, including CDRom, Fixed, Network, NoRootDirectory, Ram, Removable, and Unknown.
            </summary>
        </member>
        <member name="F:System.IO.DriveType.Unknown">
            <summary>
            The type of drive is unknown.
            </summary>
        </member>
        <member name="F:System.IO.DriveType.NoRootDirectory">
            <summary>
            The drive does not have a root directory.
            </summary>
        </member>
        <member name="F:System.IO.DriveType.Removable">
            <summary>
            The drive is a removable storage device, such as a USB flash drive or SD Card.
            </summary>
        </member>
        <member name="F:System.IO.DriveType.Fixed">
            <summary>
            The drive is fixed, such as internal flash or eeprom.
            </summary>
        </member>
        <member name="F:System.IO.DriveType.Ram">
            <summary>
            The drive is a RAM disk.
            </summary>
        </member>
        <member name="T:System.IO.FileInfo">
            <summary>
            Provides properties and instance methods for the creation, copying, deletion, moving, and opening of files, and aids in the creation of <see cref="T:System.IO.FileStream"/> objects. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:System.IO.FileInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.IO.FileInfo"/> class, which acts as a wrapper for a file path.
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="P:System.IO.FileInfo.Name">
            <inheritdoc/>
        </member>
        <member name="P:System.IO.FileInfo.Length">
            <summary>
            Gets the size, in bytes, of the current file.
            </summary>
        </member>
        <member name="P:System.IO.FileInfo.DirectoryName">
            <summary>
            Gets a string representing the directory's full path.
            </summary>
        </member>
        <member name="P:System.IO.FileInfo.Directory">
            <summary>
            Gets an instance of the parent directory.
            </summary>
        </member>
        <member name="M:System.IO.FileInfo.Create">
            <summary>
            Creates a file.
            </summary>
            <returns>A new file.</returns>
        </member>
        <member name="M:System.IO.FileInfo.Delete">
            <inheritdoc/>
        </member>
        <member name="P:System.IO.FileInfo.Exists">
            <inheritdoc/>
        </member>
        <member name="M:System.IO.FileInfo.HandleRefreshError">
            <inheritdoc/>
        </member>
        <member name="M:System.IO.FileInfo.ToString">
            <summary>
            Returns the original path that was passed to the FileInfo constructor. Use the <see cref="P:System.IO.FileSystemInfo.FullName"/> or <see cref="P:System.IO.FileInfo.Name"/> property for the full path or file name.
            </summary>
            <returns>A string representing the path.</returns>
        </member>
        <member name="T:System.IO.FileMode">
             <summary>
             Contains constants for specifying how the OS should open a file.
             These will control whether you overwrite a file, open an existing
             file, or some combination thereof.
            
             To append to a file, use Append (which maps to OpenOrCreate then we seek
             to the end of the file).  To truncate a file or create it if it doesn't
             exist, use Create.
             </summary>
        </member>
        <member name="F:System.IO.FileMode.CreateNew">
            <summary>
            Creates a new file. An exception is raised if the file already exists.
            </summary>
        </member>
        <member name="F:System.IO.FileMode.Create">
            <summary>
            Creates a new file. If the file already exists, it is overwritten.
            </summary>
        </member>
        <member name="F:System.IO.FileMode.Open">
            <summary>
            Opens an existing file. An exception is raised if the file does not exist.
            </summary>
        </member>
        <member name="F:System.IO.FileMode.OpenOrCreate">
            <summary>
            Opens the file if it exists. Otherwise, creates a new file.
            </summary>
        </member>
        <member name="F:System.IO.FileMode.Truncate">
            <summary>
            Opens an existing file. Once opened, the file is truncated so that its
            size is zero bytes. The calling process must open the file with at least
            WRITE access. An exception is raised if the file does not exist.
            </summary>
        </member>
        <member name="F:System.IO.FileMode.Append">
            <summary>
            Opens the file if it exists and seeks to the end.  Otherwise,
            creates a new file.
            </summary>
        </member>
        <member name="T:System.IO.FileShare">
            <summary>
            Contains constants for controlling file sharing options while
            opening files.  You can specify what access other processes trying
            to open the same file concurrently can have.
            </summary>
        </member>
        <member name="F:System.IO.FileShare.None">
            <summary>
            No sharing. Any request to open the file (by this process or another
            process) will fail until the file is closed.
            </summary>
        </member>
        <member name="F:System.IO.FileShare.Read">
            <summary>
            Allows subsequent opening of the file for reading. If this flag is not
            specified, any request to open the file for reading (by this process or
            another process) will fail until the file is closed.
            </summary>
        </member>
        <member name="F:System.IO.FileShare.Write">
            <summary>
            Allows subsequent opening of the file for writing. If this flag is not
            specified, any request to open the file for writing (by this process or
            another process) will fail until the file is closed.
            </summary>
        </member>
        <member name="F:System.IO.FileShare.ReadWrite">
            <summary>
            Allows subsequent opening of the file for writing or reading. If this flag
            is not specified, any request to open the file for writing or reading (by
            this process or another process) will fail until the file is closed.
            </summary>
        </member>
        <member name="T:System.IO.FileStream">
            <summary>
            Provides a Stream for a file, supporting both synchronous and asynchronous read and write operations.
            </summary>
        </member>
        <member name="P:System.IO.FileStream.CanRead">
            <summary>
            Gets a value that indicates whether the current stream supports reading.
            </summary>
            <value><see langword="true"/> if the stream supports reading; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:System.IO.FileStream.CanSeek">
            <summary>
            Gets a value that indicates whether the current stream supports seeking.
            </summary>
            <value><see langword="true"/> if the stream supports seeking; <see langword="false"/> if the stream is closed or if the <see cref="T:System.IO.FileStream"/> was constructed from an operating-system handle such as a pipe or output to the console.</value>
        </member>
        <member name="P:System.IO.FileStream.CanWrite">
            <summary>
            Gets a value that indicates whether the current stream supports writing.
            </summary>
            <value><see langword="true"/> if the stream supports writing; <see langword="false"/> if the stream is closed or was opened with read-only access.</value>
        </member>
        <member name="P:System.IO.FileStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
            <value>The length in bytes of the stream.</value>
        </member>
        <member name="P:System.IO.FileStream.Position">
            <summary>
            Gets or sets the current position of this stream.
            </summary>
            <value>The current position of this stream.</value>
        </member>
        <member name="P:System.IO.FileStream.Name">
            <summary>
            Gets the absolute path of the file opened in the <see cref="T:System.IO.FileStream"/>.
            </summary>
            <value>
            A string that is the absolute path of the file.
            </value>
        </member>
        <member name="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode)">
            <summary>
            Initializes a new instance of the <see cref="T:System.IO.FileStream"/> class with the specified path and creation mode.
            </summary>
            <param name="path">A relative or absolute path for the file that the current FileStream object will encapsulate.</param>
            <param name="mode">One of the enumeration values that determines how to open or create the file.</param>
        </member>
        <member name="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:System.IO.FileStream"/> class with the specified path, creation mode, and read/write permission.
            </summary>
            <param name="path">A relative or absolute path for the file that the current FileStream object will encapsulate.</param>
            <param name="mode">One of the enumeration values that determines how to open or create the file.</param>
            <param name="access">A bitwise combination of the enumeration values that determines how the file can be accessed by the <see cref="T:System.IO.FileStream"/> object. This also determines the values returned by the <see cref="P:System.IO.FileStream.CanRead"/> and <see cref="P:System.IO.FileStream.CanWrite"/> properties of the <see cref="T:System.IO.FileStream"/> object. <see cref="P:System.IO.FileStream.CanSeek"/> is <see langword="true"/> if path specifies a disk file.</param>
        </member>
        <member name="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Initializes a new instance of the FileStream class with the specified path, creation mode, read/write permission, and sharing permission.
            </summary>
            <param name="path">A relative or absolute path for the file that the current FileStream object will encapsulate.</param>
            <param name="mode">One of the enumeration values that determines how to open or create the file.</param>
            <param name="access">A bitwise combination of the enumeration values that determines how the file can be accessed by the <see cref="T:System.IO.FileStream"/> object. This also determines the values returned by the <see cref="P:System.IO.FileStream.CanRead"/> and <see cref="P:System.IO.FileStream.CanWrite"/> properties of the <see cref="T:System.IO.FileStream"/> object. <see cref="P:System.IO.FileStream.CanSeek"/> is <see langword="true"/> if path specifies a disk file.</param>
            <param name="share">A bitwise combination of the enumeration values that determines how the file will be shared by processes.</param>
        </member>
        <member name="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
            <summary>
            Initializes a new instance of the FileStream class with the specified path, creation mode, read/write permission, and sharing permission.
            </summary>
            <param name="path">A relative or absolute path for the file that the current FileStream object will encapsulate.</param>
            <param name="mode">One of the enumeration values that determines how to open or create the file.</param>
            <param name="access">A bitwise combination of the enumeration values that determines how the file can be accessed by the <see cref="T:System.IO.FileStream"/> object. This also determines the values returned by the <see cref="P:System.IO.FileStream.CanRead"/> and <see cref="P:System.IO.FileStream.CanWrite"/> properties of the <see cref="T:System.IO.FileStream"/> object. <see cref="P:System.IO.FileStream.CanSeek"/> is <see langword="true"/> if path specifies a disk file.</param>
            <param name="share">A bitwise combination of the enumeration values that determines how the file will be shared by processes.</param>
            <param name="bufferSize">A positive <see cref="T:System.Int32"/> value greater than 0 indicating the buffer size. The default buffer size is 2048.</param>
        </member>
        <member name="M:System.IO.FileStream.Finalize">
            <inheritdoc/>
        </member>
        <member name="M:System.IO.FileStream.Close">
            <summary>
            Closes the current stream and releases any resources associated with the current stream.
            </summary>
        </member>
        <member name="M:System.IO.FileStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the FileStream and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:System.IO.FileStream.Flush">
            <summary>
            Clears buffers for this stream and causes any buffered data to be written to the file.
            </summary>
        </member>
        <member name="M:System.IO.FileStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a block of bytes from the stream and writes the data in a given buffer.
            </summary>
            <param name="buffer">When this method returns, contains the specified byte array with the values between <paramref name="offset"/> and (<paramref name="offset"/> + <paramref name="count"/> - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The byte offset in array at which the read bytes will be placed.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <returns>The total number of bytes read into the buffer. This might be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached.</returns>
        </member>
        <member name="M:System.IO.FileStream.Read(System.SpanByte)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">The buffer to write the data into.</param>
            <returns>The total number of bytes read into the buffer. This might be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached.</returns>
            <exception cref="T:System.NotImplementedException">This method is currently not implemented.</exception>
        </member>
        <member name="M:System.IO.FileStream.ReadByte">
            <summary>
            Reads a byte from the file and advances the read position one byte.
            </summary>
            <returns>The byte, cast to an <see cref="T:System.Int32"/>, or -1 if the end of the stream has been reached.</returns>
        </member>
        <member name="M:System.IO.FileStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the current position of this stream to the given value.
            </summary>
            <param name="offset">The point relative to origin from which to begin seeking.</param>
            <param name="origin">Specifies the beginning, the end, or the current position as a reference point for <paramref name="offset"/>, using a value of type <see cref="T:System.IO.SeekOrigin"/>.</param>
            <returns>The new position in the stream.</returns>
        </member>
        <member name="M:System.IO.FileStream.SetLength(System.Int64)">
            <summary>
            Sets the length of this stream to the given value.
            </summary>
            <param name="value">The new length of the stream.</param>
        </member>
        <member name="M:System.IO.FileStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a block of bytes to the file stream.
            </summary>
            <param name="buffer">The buffer containing data to write to the stream.</param>
            <param name="offset">The zero-based byte offset in array from which to begin copying bytes to the stream.</param>
            <param name="count">The maximum number of bytes to write.</param>
        </member>
        <member name="M:System.IO.FileStream.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current position in the file stream.
            </summary>
            <param name="value">A byte to write to the stream.</param>
        </member>
        <member name="T:System.IO.FileSystemInfo">
            <summary>
            Provides the base class for both <see cref="T:System.IO.FileInfo"/> and <see cref="T:System.IO.DirectoryInfo"/> objects.
            </summary>
        </member>
        <member name="P:System.IO.FileSystemInfo.Attributes">
            <summary>
            Gets or sets the attributes for the current file or directory.
            </summary>
        </member>
        <member name="P:System.IO.FileSystemInfo.FullName">
            <summary>
            Gets the full path of the directory or file.
            </summary>
        </member>
        <member name="P:System.IO.FileSystemInfo.Extension">
            <summary>
            Gets the extension part of the file name, including the leading dot <code>.</code> even if it is the entire file name, or an empty string if no extension is present.
            </summary>
            <value>A string containing the FileSystemInfo extension.</value>
        </member>
        <member name="P:System.IO.FileSystemInfo.Exists">
            <summary>
            Gets a value indicating whether the file or directory exists.
            </summary>
        </member>
        <member name="P:System.IO.FileSystemInfo.Name">
            <summary>
            Gets the name of the file.
            </summary>
        </member>
        <member name="M:System.IO.FileSystemInfo.Delete">
            <summary>
            Deletes a file or directory.
            </summary>
        </member>
        <member name="M:System.IO.FileSystemInfo.Refresh">
            <summary>
            Refreshes the state of the object.
            </summary>
            <exception cref="T:System.IO.IOException">A device such as a disk drive is not ready.</exception>
        </member>
        <member name="M:System.IO.FileSystemInfo.HandleRefreshError">
            <summary>
            Handler for the case when the file or directory does not exist.
            </summary>
        </member>
        <member name="T:System.IO.Path">
            <summary>
            Provides methods for processing file system strings in a cross-platform manner.
            Most of the methods don't do a complete parsing (such as examining a UNC hostname),
            but they will handle most string operations.
            </summary>
        </member>
        <member name="F:System.IO.Path.DirectorySeparatorChar">
            <summary>
            Provides a platform-specific character used to separate directory levels in a path string that reflects a hierarchical file system organization.
            </summary>
        </member>
        <member name="F:System.IO.Path.AltDirectorySeparatorChar">
            <summary>
            Provides a platform-specific alternate character used to separate directory levels in a path string that reflects a hierarchical file system organization.
            </summary>
        </member>
        <member name="F:System.IO.Path.VolumeSeparatorChar">
            <summary>
            Provides a platform-specific volume separator character.
            </summary>
        </member>
        <member name="F:System.IO.Path.PathSeparator">
            <summary>
            A platform-specific separator character used to separate path strings in environment variables.
            </summary>
        </member>
        <member name="M:System.IO.Path.ChangeExtension(System.String,System.String)">
            <summary>
            Changes the extension of a path string.
            </summary>
            <param name="path">The path information to modify.</param>
            <param name="extension">
            The new extension (with or without a leading period). Specify <see langword="null"/> to remove an existing extension from <paramref name="path"/>.
            </param>
            <returns>
            The modified path information.
            
            If <paramref name="path"/> is <see langword="null"/> or an empty string (""), the path information is returned unmodified.
            If <paramref name="extension"/> is <see langword="null"/>, the returned string contains the specified path with its extension removed.
            If <paramref name="path"/> has no extension, and <paramref name="extension"/> is not <see langword="null"/>, the returned path string
            contains <paramref name="extension"/> appended to the end of <paramref name="path"/>.
            </returns>
        </member>
        <member name="M:System.IO.Path.Combine(System.String,System.String)">
            <summary>
            Combines two strings into a path.
            </summary>
            <param name="path1">The first path to combine.</param>
            <param name="path2">The second path to combine.</param>
            <returns>
            The combined paths. If one of the specified paths is a zero-length string, this method returns the other path.
            If <paramref name="path2"/> contains an absolute path, this method returns <paramref name="path2"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path1"/> or <paramref name="path2"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.IO.Path.GetDirectoryName(System.String)">
            <summary>
            Returns the directory portion of a file path. This method effectively
            removes the last segment of the given file path, i.e. it returns a
            string consisting of all characters up to but not including the last
            backslash ("\") in the file path. The returned value is null if the
            specified path is null, empty, or a root (such as "\", "C:", or
            "\\server\share").
            </summary>
            <remarks>
            Directory separators are normalized in the returned string.
            </remarks>
        </member>
        <member name="M:System.IO.Path.GetExtension(System.String)">
            <summary>
            Returns the extension (including the period ".") of the specified path string.
            </summary>
            <param name="path">The path string from which to get the extension.</param>
            <returns>
            The extension of the specified path (including the period "."), or <see langword="null"/>, or <see cref="F:System.String.Empty"/>.
            If <paramref name="path"/> is <see langword="null"/>, <see cref="M:System.IO.Path.GetExtension(System.String)"/> returns <see langword="null"/>.
            If path does not have extension information, <see cref="M:System.IO.Path.GetExtension(System.String)"/> returns <see cref="F:System.String.Empty"/>.</returns>
        </member>
        <member name="M:System.IO.Path.GetFileName(System.String)">
            <summary>
            Returns the file name and extension of the specified path string.
            </summary>
            <param name="path">The path string from which to obtain the file name and extension.</param>
            <returns>
            The characters after the last directory separator character in <paramref name="path"/>.
            If the last character of <paramref name="path"/> is a directory or volume separator character, this method returns <see cref="F:System.String.Empty"/>.
            If <paramref name="path"/> is <see langword="null"/>, this method returns <see langword="null"/>.
            </returns>
        </member>
        <member name="M:System.IO.Path.GetFileNameWithoutExtension(System.String)">
            <summary>
            Returns the file name of the specified path string without the extension.
            </summary>
            <param name="path">The path of the file.</param>
            <returns>The string returned by <see cref="M:System.IO.Path.GetFileName(System.String)"/>, minus the last period (.) and all characters following it.</returns>
        </member>
        <member name="M:System.IO.Path.GetFullPath(System.String)">
            <summary>
            Returns the absolute path for the specified path string.
            </summary>
            <param name="path">The file or directory for which to obtain absolute path information.</param>
            <returns>The fully qualified location of <paramref name="path"/>, such as "C:\MyFile.txt".</returns>
        </member>
        <member name="M:System.IO.Path.GetInvalidFileNameChars">
            <summary>
            Gets an array containing the characters that are not allowed in file names.
            </summary>
            <returns>An array containing the characters that are not allowed in file names.</returns>
        </member>
        <member name="M:System.IO.Path.GetInvalidPathChars">
            <summary>
            Gets an array containing the characters that are not allowed in path names.
            </summary>
            <returns>An array containing the characters that are not allowed in path names.</returns>
        </member>
        <member name="M:System.IO.Path.GetPathRoot(System.String)">
            <summary>
            Gets the root directory information from the path contained in the specified string.
            </summary>
            <param name="path">A string containing the path from which to obtain root directory information.</param>
            <returns>
            The root directory of <paramref name="path"/> if it is rooted.
            
            -or-
            
            <see cref="F:System.String.Empty"/> if <paramref name="path"/> does not contain root directory information.
            
            -or-
            
            <see langword="null"/> if <paramref name="path"/> is <see langword="null"/> or is effectively empty.
            </returns>
        </member>
        <member name="M:System.IO.Path.HasExtension(System.String)">
            <summary>
            Determines whether a path includes a file name extension.
            </summary>
            <param name="path">The path to search for an extension.</param>
            <returns>
            <see langword="true"/> if the characters that follow the last directory separator (\ or /) or volume separator (:)
            in the path include a period (.) followed by one or more characters; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:System.IO.Path.IsPathRooted(System.String)">
            <summary>
            Returns a value indicating whether the specified path string contains a root.
            </summary>
            <param name="path">The path to test.</param>
            <returns><see langword="true"/> if <paramref name="path"/> contains a root; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:System.IO.PathInternal">
            <summary>Contains internal path helpers that are shared between many projects.</summary>
        </member>
        <member name="M:System.IO.PathInternal.GetRootLength(System.String)">
            <summary>
            Gets the length of the root of the path (drive, share, etc.).
            </summary>
        </member>
        <member name="M:System.IO.PathInternal.IsDirectorySeparator(System.Char)">
            <summary>
            True if the given character is a directory separator.
            </summary>
        </member>
        <member name="M:System.IO.PathInternal.IsEffectivelyEmpty(System.String)">
            <summary>
            Returns true if the path is effectively empty for the current OS.
            For unix, this is empty or null. For Windows, this is empty, null, or
            just spaces ((char)32).
            </summary>
        </member>
        <member name="M:System.IO.PathInternal.IsValidDriveChar(System.Char)">
            <summary>
            Returns true if the given character is a valid drive letter
            </summary>
        </member>
        <member name="M:System.IO.PathInternal.NormalizeDirectorySeparators(System.String)">
             <summary>
             Normalize separators in the given path. Converts forward slashes into back slashes and compresses slash runs, keeping initial 2 if present.
             Also trims initial whitespace in front of "rooted" paths (see PathStartSkip).
            
             This effectively replicates the behavior of the legacy NormalizePath when it was called with fullCheck=false and expandShortpaths=false.
             The current NormalizePath gets directory separator normalization from Win32's GetFullPathName(), which will resolve relative paths and as
             such can't be used here (and is overkill for our uses).
            
             Like the current NormalizePath this will not try and analyze periods/spaces within directory segments.
             </summary>
             <remarks>
             The only callers that used to use Path.Normalize(fullCheck=false) were Path.GetDirectoryName() and Path.GetPathRoot(). Both usages do
             not need trimming of trailing whitespace here.
            
             GetPathRoot() could technically skip normalizing separators after the second segment- consider as a future optimization.
            
             For legacy .NET Framework behavior with ExpandShortPaths:
              - It has no impact on GetPathRoot() so doesn't need consideration.
              - It could impact GetDirectoryName(), but only if the path isn't relative (C:\ or \\Server\Share).
            
             In the case of GetDirectoryName() the ExpandShortPaths behavior was undocumented and provided inconsistent results if the path was
             fixed/relative. For example: "C:\PROGRA~1\A.TXT" would return "C:\Program Files" while ".\PROGRA~1\A.TXT" would return ".\PROGRA~1". If you
             ultimately call GetFullPath() this doesn't matter, but if you don't or have any intermediate string handling could easily be tripped up by
             this undocumented behavior.
            
             We won't match this old behavior because:
            
               1. It was undocumented
               2. It was costly (extremely so if it actually contained '~')
               3. Doesn't play nice with string logic
               4. Isn't a cross-plat friendly concept/behavior
             </remarks>
        </member>
        <member name="T:nanoFramework.System.IO.CardDetectState">
            <summary>
            State of card detect
            </summary>
        </member>
        <member name="F:nanoFramework.System.IO.CardDetectState.Inserted">
            <summary>
            Card Inserted
            </summary>
        </member>
        <member name="F:nanoFramework.System.IO.CardDetectState.Removed">
            <summary>
            Card removed
            </summary>
        </member>
        <member name="T:nanoFramework.System.IO.CardDetectChangedEventArgs">
            <summary>
            Arguments for Card detect event
            </summary>
        </member>
        <member name="P:nanoFramework.System.IO.CardDetectChangedEventArgs.CardState">
            <summary>
            State of Card Detect.
            </summary>
        </member>
        <member name="P:nanoFramework.System.IO.CardDetectChangedEventArgs.SlotIndex">
            <summary>
            SD card slot index
            </summary>
        </member>
        <member name="T:nanoFramework.System.IO.FileSystem.CardDetectParameters">
            <summary>
            Parameter used for Card detection when creating a SDcard instance.
            </summary>
        </member>
        <member name="F:nanoFramework.System.IO.FileSystem.CardDetectParameters.enableCardDetectPin">
            <summary>
            Set true when an Card Detect Pin is used. 
            The cardDetectPin parameter must have a valid GPIO pin.
            </summary>
            <remarks>
            Not all SD Card modules have a card detect pin or the pin connected to a GPIO pin. 
            </remarks>
        </member>
        <member name="F:nanoFramework.System.IO.FileSystem.CardDetectParameters.cardDetectedState">
            <summary>
            The state of the pin when the card is detected.
            Defaults to false(low) if not specified.
            If using card detect logic then this depends on connected hardware.
            </summary>
        </member>
        <member name="F:nanoFramework.System.IO.FileSystem.CardDetectParameters.cardDetectPin">
            <summary>
            The optional card detect GPIO pin which must be set to a valid pin if EnableCardDetectPin is true.
            If defined a StorageEventManager event will be raised when a card is inserted or removed.
            </summary>
        </member>
        <member name="F:nanoFramework.System.IO.FileSystem.CardDetectParameters.autoMount">
            <summary>
            When enabled will try to automatically mount the SD card when the card is inserted.
            If the card is removed unexpectedly it will try to unmount card to release resources.
            </summary>
        </member>
        <member name="T:nanoFramework.System.IO.FileSystem.SDCardMmcParameters">
            <summary>
            Parameter used for creating a MMC card instance.
            </summary>
        </member>
        <member name="F:nanoFramework.System.IO.FileSystem.SDCardMmcParameters.slotIndex">
            <summary>
            The slot index to mount. Some devices can have more then 1 SD card slot
            Defaults to 0
            Slot 0 will mount as drive D:\ , slot 1 = E:\  etc
            </summary>
        </member>
        <member name="F:nanoFramework.System.IO.FileSystem.SDCardMmcParameters.dataWidth">
            <summary>
            Data width to use on MMC SD protocol.
            </summary>
        </member>
        <member name="T:nanoFramework.System.IO.FileSystem.SDCardSpiParameters">
            <summary>
            Parameter used for creating a SPI card instance.
            </summary>
        </member>
        <member name="F:nanoFramework.System.IO.FileSystem.SDCardSpiParameters.slotIndex">
            <summary>
            The slot index to mount. Some devices can have more then 1 SD card slot
            Defaults to 0.  
            Slot 0 will mount as drive D:\ , slot 1 = E:\  etc
            </summary>
        </member>
        <member name="F:nanoFramework.System.IO.FileSystem.SDCardSpiParameters.spiBus">
            <summary>
            The SPI bus to use for SD Card.
            </summary>
        </member>
        <member name="F:nanoFramework.System.IO.FileSystem.SDCardSpiParameters.chipSelectPin">
            <summary>
            The chip select pin to use for SD Card.
            </summary>
        </member>
        <member name="T:nanoFramework.System.IO.FileSystem.CardDetectStateEventHandler">
            <summary>
            Provides an event handler that is called when a SD card detect state change event occurs.
            </summary>
            <param name="sender">Specifies the object that sent the event.</param>
            <param name="e">Contains the Card detect changed event arguments</param>
        </member>
        <member name="T:nanoFramework.System.IO.FileSystem.SDCard">
            <summary>
            Class to allow a SD memory card to be configured and mounted on the system.
            </summary>
        </member>
        <member name="P:nanoFramework.System.IO.FileSystem.SDCard.CardType">
            <summary>
            Type of interface used by SDCard.
            </summary>
        </member>
        <member name="P:nanoFramework.System.IO.FileSystem.SDCard.IsMounted">
            <summary>
            Indicates if the SD card has been mounted.
            </summary>
        </member>
        <member name="P:nanoFramework.System.IO.FileSystem.SDCard.CardDetectEnabled">
            <summary>
            Return true if Card detection is enabled.
            </summary>
        </member>
        <member name="P:nanoFramework.System.IO.FileSystem.SDCard.SlotIndex">
            <summary>
            SD card slot index.
            </summary>
        </member>
        <member name="P:nanoFramework.System.IO.FileSystem.SDCard.MmcParameters">
            <summary>
            The parameters for a MMC connected SD card.
            </summary>
        </member>
        <member name="P:nanoFramework.System.IO.FileSystem.SDCard.SpiParameters">
            <summary>
            The parameters for a SPI connected SD card. 
            </summary>
        </member>
        <member name="P:nanoFramework.System.IO.FileSystem.SDCard.CdParameters">
            <summary>
            The Card detect parameters for SD card.
            </summary>
        </member>
        <member name="E:nanoFramework.System.IO.FileSystem.SDCard.CardDetectChanged">
            <summary>
            Event that occurs when SD card detect changes state.
            </summary>
            <remarks>
            <para>
            The <see cref="T:nanoFramework.System.IO.FileSystem.SDCard"/> class raises the <see cref="E:nanoFramework.System.IO.FileSystem.SDCard.CardDetectChanged"/> event when an SD Cards is inserted or removed.
            This is only raised if SD card is configured with a Card Detect pin. Some SD card holders don't have this feature.
            </para>
            You only need to use this event if the <see cref="T:nanoFramework.System.IO.FileSystem.CardDetectParameters"/> are configured for a manual mount of card on card detect. The default is automatic.
            </remarks>
        </member>
        <member name="P:nanoFramework.System.IO.FileSystem.SDCard.IsCardDetected">
            <summary>
            Indicates if SD card has been detected if optional cardDetectPin parameter is enabled with a valid GPIO pin.
            If not enabled will always return false.
            </summary>
            <remarks>
            Not all SD Card modules have a card detect pin or the pin connected to a GPIO pin. 
            </remarks>
        </member>
        <member name="M:nanoFramework.System.IO.FileSystem.SDCard.#ctor(System.UInt32)">
            <summary>
            Creates an instance of SDcard where parameters have already been defined in firmware. 
            </summary>
        </member>
        <member name="M:nanoFramework.System.IO.FileSystem.SDCard.#ctor(nanoFramework.System.IO.FileSystem.SDCardMmcParameters,nanoFramework.System.IO.FileSystem.CardDetectParameters)">
            <summary>
            Create an instance of SDCard for a MMC connected SD card.
            </summary>
            <param name="mmcParameters">Connection parameters</param>
            <param name="cdParameters">Card detect parameters</param>
        </member>
        <member name="M:nanoFramework.System.IO.FileSystem.SDCard.#ctor(nanoFramework.System.IO.FileSystem.SDCardSpiParameters,nanoFramework.System.IO.FileSystem.CardDetectParameters)">
            <summary>
            Create an instance of SDCard for a SPI connected SD card.
            </summary>
            <param name="spiParameters">Connection parameters</param>
            <param name="cdParameters">Card detect parameters</param>
        </member>
        <member name="M:nanoFramework.System.IO.FileSystem.SDCard.Mount">
            <summary>
            Mount the SD memory card device 
            </summary>
            <remarks>
            This will try to mount the SD memory card on the specified interface.
            If the Card is not present or the card is unable to be read then an exception will be thrown.
            </remarks>
        </member>
        <member name="M:nanoFramework.System.IO.FileSystem.SDCard.Unmount">
            <summary>
            Unmount a mounted SD memory card.
            </summary>
        </member>
        <member name="M:nanoFramework.System.IO.FileSystem.SDCard.Dispose">
            <summary>
            <inheritdoc cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="T:nanoFramework.System.IO.FileSystem.SDCard.SDInterfaceType">
            <summary>
            SDCard interface type.
            </summary>
        </member>
        <member name="F:nanoFramework.System.IO.FileSystem.SDCard.SDInterfaceType.System">
            <summary>
            Interface already defined in firmware. 
            </summary>
        </member>
        <member name="F:nanoFramework.System.IO.FileSystem.SDCard.SDInterfaceType.Mmc">
            <summary>
            MMC SDcard interface type
            </summary>
        </member>
        <member name="F:nanoFramework.System.IO.FileSystem.SDCard.SDInterfaceType.Spi">
            <summary>
            SPI SDCard interface type
            </summary>
        </member>
        <member name="T:nanoFramework.System.IO.FileSystem.SDCard.SDDataWidth">
            <summary>
            Data width to use on MMC SD protocol.
            </summary>
        </member>
        <member name="F:nanoFramework.System.IO.FileSystem.SDCard.SDDataWidth._1_bit">
            <summary>
            1-bit width.
            </summary>
        </member>
        <member name="F:nanoFramework.System.IO.FileSystem.SDCard.SDDataWidth._4_bit">
            <summary>
            4-bit width.
            </summary>
        </member>
        <member name="T:nanoFramework.System.IO.RemovableDriveEventArgs">
            <summary>
            Contains argument values for Removable Drive events.
            </summary>
        </member>
        <member name="P:nanoFramework.System.IO.RemovableDriveEventArgs.Drive">
            <summary>
            The <see cref="T:System.IO.DriveInfo"/> of the removable drive.
            </summary>
        </member>
        <member name="P:nanoFramework.System.IO.RemovableDriveEventArgs.Event">
            <summary>
            The <see cref="T:nanoFramework.System.IO.RemovableDriveEventArgs.RemovableDeviceEvent"/> occurred.
            </summary>
        </member>
        <member name="T:nanoFramework.System.IO.RemovableDriveEventArgs.RemovableDeviceEvent">
            <summary>
            Specifies the type of event occurred with the Removable Device specified.
            </summary>
            <remarks>
            This enum is specific to nanoFramework. There is no equivalent in the UWP API.
            </remarks>
        </member>
        <member name="F:nanoFramework.System.IO.RemovableDriveEventArgs.RemovableDeviceEvent.Inserted">
            <summary>
            A Removable Device has been inserted.
            </summary>
        </member>
        <member name="F:nanoFramework.System.IO.RemovableDriveEventArgs.RemovableDeviceEvent.Removed">
            <summary>
            A Removable Device has been removed.
            </summary>
        </member>
        <member name="T:nanoFramework.System.IO.RemovableDeviceEventHandler">
            <summary>
            Provides an event handler that is called when a Removable Device event occurs.
            </summary>
            <param name="sender">Specifies the object that sent the Removable Device event. </param>
            <param name="e">Contains the Removable Device event arguments. </param>
        </member>
        <member name="T:nanoFramework.System.IO.StorageEventManager">
            <summary>
            Event manager for Storage events.
            </summary>
        </member>
        <member name="E:nanoFramework.System.IO.StorageEventManager.RemovableDeviceInserted">
            <summary>
            Event that occurs when a Removable Device is inserted.
            </summary>
            <remarks>
            The <see cref="T:nanoFramework.System.IO.StorageEventManager"/> class raises <see cref="E:nanoFramework.System.IO.StorageEventManager.RemovableDeviceInserted"/> events when Removable Devices (typically SD Cards and USB mass storage device) are inserted and removed.
            
            To have a <see cref="T:nanoFramework.System.IO.StorageEventManager"/> object call an event-handling method when a <see cref="E:nanoFramework.System.IO.StorageEventManager.RemovableDeviceInserted"/> event occurs, 
            you must associate the method with a <see cref="T:nanoFramework.System.IO.RemovableDeviceEventHandler"/> delegate, and add this delegate to this event. 
            </remarks>
        </member>
        <member name="E:nanoFramework.System.IO.StorageEventManager.RemovableDeviceRemoved">
            <summary>
            Event that occurs when a Removable Device is removed.
            </summary>
            <remarks>
            The <see cref="T:nanoFramework.System.IO.StorageEventManager"/> class raises <see cref="E:nanoFramework.System.IO.StorageEventManager.RemovableDeviceRemoved"/> events when Removable Devices (typically SD Cards and USB mass storage device) are inserted and removed.
            
            To have a <see cref="T:nanoFramework.System.IO.StorageEventManager"/> object call an event-handling method when a <see cref="E:nanoFramework.System.IO.StorageEventManager.RemovableDeviceRemoved"/> event occurs, 
            you must associate the method with a <see cref="T:nanoFramework.System.IO.RemovableDeviceEventHandler"/> delegate, and add this delegate to this event. 
            </remarks>
        </member>
        <member name="M:nanoFramework.System.IO.StorageEventManager.RegisterSDcardForEvents(nanoFramework.System.IO.FileSystem.SDCard)">
            <summary>
            Register SDCard object for events
            </summary>
            <param name="card">SDcard object reference.</param>
            <returns>True if successfully registered, false for duplicate index</returns>
        </member>
    </members>
</doc>
